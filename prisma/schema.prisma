generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  name               String
  email              String     @unique
  emailVerified      DateTime?
  activationLink     String     @unique
  hashedPassword     String
  image              String?
  tel                String?
  role               Role       @default(WORKER)
  vacancyIds         String[]   @db.ObjectId
  respondedVacancies Vacancy[]  @relation(fields: [vacancyIds], references: [id])
  resume             Resume?
  token              Token?
  company            Company?
  feedback           Feedback[]
}

model Token {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  token  String @unique
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Company {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  hashedPassword    String
  name              String    @unique
  text              String
  countryCenterFull String
  img               String
  userId            String    @unique @db.ObjectId
  user              User      @relation(fields: [userId], references: [id])
  vacancies         Vacancy[]
}

model Vacancy {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  name             String
  country          String
  city             String
  isHome           Boolean
  salary           Int
  currency         Currency
  experience       ExperienceTime @default(NOT)
  text             String?
  responsibilities String
  conditions       String?
  watchingNow      Int            @default(0)
  closed           Boolean        @default(false)
  companyId        String         @db.ObjectId
  company          Company        @relation(fields: [companyId], references: [id])
  responderIds     String[]       @db.ObjectId
  responders       User[]         @relation(fields: [responderIds], references: [id])
  feedback         Feedback[]
}

model Resume {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  age          Int
  namePosition String
  country      String
  city         String
  text         String
  userId       String @unique @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  isInvite  Boolean?
  vacancyId String   @db.ObjectId
  vacancy   Vacancy  @relation(fields: [vacancyId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@unique([vacancyId, userId])
}

enum Role {
  WORKER
  EMPLOYER
}

enum ExperienceTime {
  NOT
  FROM_ONE_TO_THREE
  FROM_THREE_TO_SIX
}

enum KeySkills {
  FULLSTACK
  FRONTEND
  BACKEND
}

enum Currency {
  RUB
  USD
}
